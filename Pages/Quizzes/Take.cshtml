@page "{id:int}"
@model QuizApp.Pages.Quizzes.TakeModel
@{
    ViewData["Title"] = Model.Quiz.Title;
}

<div class="container">
    <div class="card mb-4 shadow animate-on-scroll">
        <div class="card-header bg-gradient-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h3 mb-0">@Model.Quiz.Title</h1>
                <div id="countdown" class="countdown">00:00</div>
            </div>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-8">
                    <p class="lead mb-0">@Model.Quiz.Description</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <div class="d-flex justify-content-md-end align-items-center">
                        <span class="me-3">
                            <i class="bi bi-clock"></i> Time Limit: @Model.Quiz.TimeLimit minutes
                        </span>
                        <span>
                            <i class="bi bi-question-circle"></i> Questions: @Model.Quiz.Questions.Count
                        </span>
                    </div>
                </div>
            </div>

            <div class="progress mb-4" style="height: 8px;">
                <div id="quiz-progress" class="progress-bar bg-primary" role="progressbar" style="width: 0%;" 
                    aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>

            <form method="post" id="quizForm">
                <div id="questions-container">
                    @foreach (var (question, index) in Model.Quiz.Questions.Select((q, i) => (q, i)))
                    {
                        <div class="question-slide" id="question-@index" style="display: @(index == 0 ? "block" : "none");">
                            <div class="card question-card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Question @(index + 1) of @Model.Quiz.Questions.Count</h5>
                                    <span class="badge bg-primary rounded-pill">@(index + 1)/@Model.Quiz.Questions.Count</span>
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title mb-4">@question.Text</h5>
                                    
                                    <div class="options-container">
                                        @foreach (var option in question.Options)
                                        {
                                            <div class="question-option mb-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="Answers[@question.Id]" 
                                                        value="@option.Id" id="option_@option.Id" required>
                                                    <label class="form-check-label w-100" for="option_@option.Id">
                                                        @option.Text
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer d-flex justify-content-between">
                                    @if (index > 0)
                                    {
                                        <button type="button" class="btn btn-outline-primary prev-btn" data-index="@index">
                                            <i class="bi bi-arrow-left"></i> Previous
                                        </button>
                                    }
                                    else
                                    {
                                        <div></div>
                                    }

                                    @if (index < Model.Quiz.Questions.Count - 1)
                                    {
                                        <button type="button" class="btn btn-primary next-btn" data-index="@index">
                                            Next <i class="bi bi-arrow-right"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-success finish-btn" id="finish-quiz">
                                            <i class="bi bi-check-circle"></i> Finish Quiz
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="text-center my-4" id="pagination-controls">
                    <div class="btn-group" role="group">
                        @for (var i = 0; i < Model.Quiz.Questions.Count; i++)
                        {
                            <button type="button" class="btn btn-outline-primary question-nav @(i == 0 ? "active" : "")" 
                                data-question="@i">@(i + 1)</button>
                        }
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-secondary" id="back-to-quizzes">
                        <i class="bi bi-arrow-left"></i> Back to Quizzes
                    </button>
                    
                    <div class="confirmation-buttons" style="display: none;">
                        <button type="button" class="btn btn-outline-secondary me-2" id="cancel-submit">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-success" id="submit-quiz">
                            <i class="bi bi-check-circle"></i> Submit Answers
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmSubmitModal" tabindex="-1" aria-labelledby="confirmSubmitModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmSubmitModalLabel">Confirm Submission</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to submit your answers? You won't be able to make changes after submission.</p>
                <div id="unanswered-warning" class="alert alert-warning d-none">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <span id="unanswered-count"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Go Back</button>
                <button type="button" class="btn btn-success" id="confirm-submit">Yes, Submit Quiz</button>
            </div>
        </div>
    </div>
</div>

<!-- Leave Quiz Confirmation Modal -->
<div class="modal fade" id="leaveQuizModal" tabindex="-1" aria-labelledby="leaveQuizModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="leaveQuizModalLabel">Leave Quiz?</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to leave this quiz? Your progress will be lost.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Stay on Quiz</button>
                <a href="/Quizzes/Index" class="btn btn-danger">Leave Quiz</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Setup quiz timer
            const timeLimit = @Model.Quiz.TimeLimit * 60; // convert to seconds
            let timeLeft = timeLimit;
            let currentQuestion = 0;
            const totalQuestions = @Model.Quiz.Questions.Count;
            
            // Initialize progress bar
            updateProgressBar();
            
            function updateProgressBar() {
                const progress = Math.round(((currentQuestion + 1) / totalQuestions) * 100);
                $('#quiz-progress').css('width', progress + '%').attr('aria-valuenow', progress);
            }

            function updateCountdown() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;

                const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                $('#countdown').text(formattedTime);

                // Add warning class when time is running low
                if (timeLeft <= 30) {
                    $('#countdown').removeClass('warning').addClass('danger');
                } else if (timeLeft <= 120) {
                    $('#countdown').removeClass('danger').addClass('warning');
                } else {
                    $('#countdown').removeClass('warning danger');
                }

                if (timeLeft <= 0) {
                    clearInterval(timer);
                    $('#countdown').text("Time's up!");
                    
                    // Show a toast message
                    showToast("Time's up! Submitting your answers...", "warning");
                    
                    // Add slight delay before submitting
                    setTimeout(() => {
                        $('#quizForm').submit();
                    }, 1500);
                }

                timeLeft--;
            }

            // Initialize countdown
            updateCountdown();
            const timer = setInterval(updateCountdown, 1000);
            
            // Navigation between questions
            $('.next-btn').click(function() {
                const index = parseInt($(this).data('index'));
                showQuestion(index + 1);
            });
            
            $('.prev-btn').click(function() {
                const index = parseInt($(this).data('index'));
                showQuestion(index - 1);
            });
            
            $('.question-nav').click(function() {
                const index = parseInt($(this).data('question'));
                showQuestion(index);
            });
            
            function showQuestion(index) {
                $('.question-slide').hide();
                $(`#question-${index}`).fadeIn(300);
                $('.question-nav').removeClass('active');
                $(`.question-nav[data-question="${index}"]`).addClass('active');
                currentQuestion = index;
                updateProgressBar();
            }
            
            // Confirmation before submission
            $('#finish-quiz').click(function() {
                // Check for unanswered questions
                const totalQuestions = @Model.Quiz.Questions.Count;
                const answeredQuestions = $('input[type="radio"]:checked').length;
                const unansweredCount = totalQuestions - answeredQuestions;
                
                if (unansweredCount > 0) {
                    $('#unanswered-count').text(`You have ${unansweredCount} unanswered question${unansweredCount > 1 ? 's' : ''}.`);
                    $('#unanswered-warning').removeClass('d-none');
                } else {
                    $('#unanswered-warning').addClass('d-none');
                }
                
                // Show confirmation modal
                $('#confirmSubmitModal').modal('show');
            });
            
            // Confirm submission
            $('#confirm-submit').click(function() {
                $('#confirmSubmitModal').modal('hide');
                $('#quizForm').submit();
            });
            
            // Back to quizzes button
            $('#back-to-quizzes').click(function() {
                $('#leaveQuizModal').modal('show');
            });
            
            // Show toast notification function
            function showToast(message, type = 'success') {
                // Create toast container if it doesn't exist
                let toastContainer = document.querySelector('.toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                    document.body.appendChild(toastContainer);
                }
                
                // Create toast element
                const toastEl = document.createElement('div');
                toastEl.className = `toast bg-${type} text-white`;
                toastEl.setAttribute('role', 'alert');
                toastEl.setAttribute('aria-live', 'assertive');
                toastEl.setAttribute('aria-atomic', 'true');
                
                // Create toast content
                toastEl.innerHTML = `
                    <div class="toast-header bg-${type} text-white">
                        <strong class="me-auto">QuizApp</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                `;
                
                // Add to container
                toastContainer.appendChild(toastEl);
                
                // Initialize and show the toast
                const toast = new bootstrap.Toast(toastEl, { 
                    autohide: true,
                    delay: 3000
                });
                toast.show();
                
                // Remove toast after it's hidden
                toastEl.addEventListener('hidden.bs.toast', function() {
                    toastEl.remove();
                });
            }
            
            // Handle option selection with enhanced UI
            $('.question-option').click(function() {
                const radio = $(this).find('input[type="radio"]');
                const name = radio.attr('name');
                
                // Deselect all options in this group
                $(`.question-option input[name="${name}"]`).closest('.question-option').removeClass('selected');
                
                // Select this option
                $(this).addClass('selected');
                radio.prop('checked', true);
            });
        });
    </script>
}